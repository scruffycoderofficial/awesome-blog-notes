{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"getting_started/","text":"Getting Started \u00b6 Awesome Booking Service started as a small endeavor , that sought to demonstrate: how one write specs for Concrete Classes verify that implementation can actually fulfil business needs Code Repository Source code associated with this Chapter can be found at github . The main objective was to document a process in a manner that was already demonstrated(see DesignPatternsPHP). luyandasiko in desktop-app $ mkdir awesome-works At this point we have just configured our workspace from which we will work from and below is a modular view of our approach . Architectural Smell BookingService suggests that AccommodationBookingService can optionally depend on it. It is important, in Agile, to timeously revisit your business model if it is improving. Architectural Review \u00b6 The ability to build a model that you believe works than what actually does is one thing. There seems to be a hard dependency in our code-base no matter we think our Code Quality is Flexible . The Decorator Pattern allows for this already. Test Cases \u00b6 As just proof with no proper business value messure bookable item , lets book it. PHPSpec Coverage \u00b6 What is PHPSpec? PHPSPEC .... It is important, in Agile, to timeously revisit your business model , to check if it is improving or not. luyandasiko in awesome-booking-service -> feature/automated_acceptance_test_integration [ ?$ ] $ vendor/bin/phpspec run DigitalClosuxe \\A wesome \\S ervice \\B ookingService \\A ccommodation \\L ine \\A dditionalBed 24 \u2714 is initializable ( 79ms ) 29 \u2714 is a booking service 34 \u2714 has an accumulated price 39 \u2714 has extra bed description DigitalClosuxe \\A wesome \\S ervice \\B ookingService \\A ccommodation \\L ine \\H otspotWifi 24 \u2714 is initializable 29 \u2714 is a booking service 34 \u2714 has an accumulated price 39 \u2714 has wifi description DigitalClosuxe \\A wesome \\S ervice \\B ookingService \\T ype \\A ccommodationBooking 11 \u2714 is initializable 16 \u2714 is a booking service type 21 \u2714 has a standard price 26 \u2714 has description 3 specs 12 examples ( 12 passed ) 88ms Unit Testing Coverage \u00b6 luyandasiko in awesome-booking-service -> feature/automated_acceptance_test_integration [ ?$ ] $ vendor/bin/phpunit PHPUnit 9 .2.6 by Sebastian Bergmann and contributors. Runtime: PHP 7 .4.8 Configuration: /Users/luyandasiko/awesome-works/awesome-booking-service/phpunit.xml ....... 7 / 7 ( 100 % ) Time: 00 :00.048, Memory: 6 .00 MB OK ( 7 tests, 20 assertions ) Look out for Gherkin, it is a powerful language ? luyandasiko in awesome-booking-service -> feature/automated_acceptance_test_integration [?$] $ vendor/bin/behat Feature: Standard Price Accommodation booking As a Software Engineer I want to ensure that the Booking Service calculates prices So that I can verify the correctness of my solution Scenario: Calculate Standard Price booking # features/bootstrap/booking_services/accommodation_bookings_service.feature:7 Given I have a \" DigitalClosuxe\\Awesome\\Service\\BookingService\\BookingService \" booking Service # FeatureContext::iHaveABookingService() And I check the Booking Service price # FeatureContext::iCheckTheBookingServicePrice() Then the Booking Price should equal \" 40 \" # FeatureContext::theBookingPriceShouldEqual() Scenario: Calculate Standard Price booking with Hotspot Wifi # features/bootstrap/booking_services/accommodation_bookings_service.feature:12 Given I have a \" DigitalClosuxe\\Awesome\\Service\\BookingService\\BookingService \" booking Service # FeatureContext::iHaveABookingService() And I add Wifi Hotspot as an extra to my booking # FeatureContext::iAddWifiHotspotAsAnExtraToMyBooking() Then the Booking Price should equal \" 42 \" # FeatureContext::theBookingPriceShouldEqual() Scenario: Calculate Standard Price booking with extra Bed # features/bootstrap/booking_services/accommodation_bookings_service.feature:17 Given I have a \" DigitalClosuxe\\Awesome\\Service\\BookingService\\BookingService \" booking Service # FeatureContext::iHaveABookingService() And I add an extra Bed as an extra to my booking # FeatureContext::iAddAnExtraBedAsAnExtraToMyBooking() Then the Booking Price should equal \" 70 \" # FeatureContext::theBookingPriceShouldEqual() Scenario: Calculate Standard Price booking with Hotspot Wifi and extra Bed # features/bootstrap/booking_services/accommodation_bookings_service.feature:22 Given I have a \" DigitalClosuxe\\Awesome\\Service\\BookingService\\BookingService \" booking Service # FeatureContext::iHaveABookingService() And I add Wifi Hotspot and a Bed as an extra to my booking # FeatureContext::iAddWifiHotspotAndABedAsAnExtraToMyBooking() Then the Booking Price should equal \" 72 \" # FeatureContext::theBookingPriceShouldEqual() 4 scenarios ( 4 passed) 12 steps ( 12 passed) 0 m 0.10 s ( 9.75 Mb) Solution Design \u00b6 It turns out that, if we spec an implementation we afford ourselves an opportunity to refinement . Let us imagine the class implementation for a typyical AccommodationBookingService Development Pipeline as a Process Task \u00b6 Each Software Engineer should be able to create a Request for Proposal Report Document for Sprint Planning Review .","title":"Introduction"},{"location":"getting_started/#getting-started","text":"Awesome Booking Service started as a small endeavor , that sought to demonstrate: how one write specs for Concrete Classes verify that implementation can actually fulfil business needs Code Repository Source code associated with this Chapter can be found at github . The main objective was to document a process in a manner that was already demonstrated(see DesignPatternsPHP). luyandasiko in desktop-app $ mkdir awesome-works At this point we have just configured our workspace from which we will work from and below is a modular view of our approach . Architectural Smell BookingService suggests that AccommodationBookingService can optionally depend on it. It is important, in Agile, to timeously revisit your business model if it is improving.","title":"Getting Started"},{"location":"getting_started/#architectural-review","text":"The ability to build a model that you believe works than what actually does is one thing. There seems to be a hard dependency in our code-base no matter we think our Code Quality is Flexible . The Decorator Pattern allows for this already.","title":"Architectural Review"},{"location":"getting_started/#test-cases","text":"As just proof with no proper business value messure bookable item , lets book it.","title":"Test Cases"},{"location":"getting_started/#phpspec-coverage","text":"What is PHPSpec? PHPSPEC .... It is important, in Agile, to timeously revisit your business model , to check if it is improving or not. luyandasiko in awesome-booking-service -> feature/automated_acceptance_test_integration [ ?$ ] $ vendor/bin/phpspec run DigitalClosuxe \\A wesome \\S ervice \\B ookingService \\A ccommodation \\L ine \\A dditionalBed 24 \u2714 is initializable ( 79ms ) 29 \u2714 is a booking service 34 \u2714 has an accumulated price 39 \u2714 has extra bed description DigitalClosuxe \\A wesome \\S ervice \\B ookingService \\A ccommodation \\L ine \\H otspotWifi 24 \u2714 is initializable 29 \u2714 is a booking service 34 \u2714 has an accumulated price 39 \u2714 has wifi description DigitalClosuxe \\A wesome \\S ervice \\B ookingService \\T ype \\A ccommodationBooking 11 \u2714 is initializable 16 \u2714 is a booking service type 21 \u2714 has a standard price 26 \u2714 has description 3 specs 12 examples ( 12 passed ) 88ms","title":"PHPSpec Coverage"},{"location":"getting_started/#unit-testing-coverage","text":"luyandasiko in awesome-booking-service -> feature/automated_acceptance_test_integration [ ?$ ] $ vendor/bin/phpunit PHPUnit 9 .2.6 by Sebastian Bergmann and contributors. Runtime: PHP 7 .4.8 Configuration: /Users/luyandasiko/awesome-works/awesome-booking-service/phpunit.xml ....... 7 / 7 ( 100 % ) Time: 00 :00.048, Memory: 6 .00 MB OK ( 7 tests, 20 assertions ) Look out for Gherkin, it is a powerful language ? luyandasiko in awesome-booking-service -> feature/automated_acceptance_test_integration [?$] $ vendor/bin/behat Feature: Standard Price Accommodation booking As a Software Engineer I want to ensure that the Booking Service calculates prices So that I can verify the correctness of my solution Scenario: Calculate Standard Price booking # features/bootstrap/booking_services/accommodation_bookings_service.feature:7 Given I have a \" DigitalClosuxe\\Awesome\\Service\\BookingService\\BookingService \" booking Service # FeatureContext::iHaveABookingService() And I check the Booking Service price # FeatureContext::iCheckTheBookingServicePrice() Then the Booking Price should equal \" 40 \" # FeatureContext::theBookingPriceShouldEqual() Scenario: Calculate Standard Price booking with Hotspot Wifi # features/bootstrap/booking_services/accommodation_bookings_service.feature:12 Given I have a \" DigitalClosuxe\\Awesome\\Service\\BookingService\\BookingService \" booking Service # FeatureContext::iHaveABookingService() And I add Wifi Hotspot as an extra to my booking # FeatureContext::iAddWifiHotspotAsAnExtraToMyBooking() Then the Booking Price should equal \" 42 \" # FeatureContext::theBookingPriceShouldEqual() Scenario: Calculate Standard Price booking with extra Bed # features/bootstrap/booking_services/accommodation_bookings_service.feature:17 Given I have a \" DigitalClosuxe\\Awesome\\Service\\BookingService\\BookingService \" booking Service # FeatureContext::iHaveABookingService() And I add an extra Bed as an extra to my booking # FeatureContext::iAddAnExtraBedAsAnExtraToMyBooking() Then the Booking Price should equal \" 70 \" # FeatureContext::theBookingPriceShouldEqual() Scenario: Calculate Standard Price booking with Hotspot Wifi and extra Bed # features/bootstrap/booking_services/accommodation_bookings_service.feature:22 Given I have a \" DigitalClosuxe\\Awesome\\Service\\BookingService\\BookingService \" booking Service # FeatureContext::iHaveABookingService() And I add Wifi Hotspot and a Bed as an extra to my booking # FeatureContext::iAddWifiHotspotAndABedAsAnExtraToMyBooking() Then the Booking Price should equal \" 72 \" # FeatureContext::theBookingPriceShouldEqual() 4 scenarios ( 4 passed) 12 steps ( 12 passed) 0 m 0.10 s ( 9.75 Mb)","title":"Unit Testing Coverage"},{"location":"getting_started/#solution-design","text":"It turns out that, if we spec an implementation we afford ourselves an opportunity to refinement . Let us imagine the class implementation for a typyical AccommodationBookingService","title":"Solution Design"},{"location":"getting_started/#development-pipeline-as-a-process-task","text":"Each Software Engineer should be able to create a Request for Proposal Report Document for Sprint Planning Review .","title":"Development Pipeline as a Process Task"}]}